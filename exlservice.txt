Why constructor is not declared in interface in Java?
An Interface in Java doesn't have a constructor because all data members in interfaces are public static final by default, they are constants (assign the values at the time of declaration). There are no data members in an interface to initialize them through the constructor.

Why interfaces can not have the constructor?

An Interface is a complete abstraction of class. All data members present in the interface are by default public, static, and final. All the static final fields should be assigned values at the time of declaration, otherwise it will throw compilation error saying “variable variable_Name not initialized in default constructor”.

The methods inside the interface are by default public abstract which means the method implementation cannot be provided by the interface itself, it has to be provided by the implementing class. Therefore, no need of having a constructor inside the interface.

A constructor is used to initializing non-static data members and as there are no non-static data members in the interface, there is no need of constructor

Methods present in the interface are only declared not defined, As there is no implementation of methods, there is no need of making objects for calling methods in the interface and thus no point of having constructor in it.

If we try to create a constructor inside the interface, the compiler will give a compile-time error.


Objects are related to each other using more than one relationship, such as Aggregation, Composition, Association, etc.

Composition
Composition is a "belong-to" type of relationship in which one object is logically related with other objects. It is also referred to as "has-a" relationship. We can understand has-a or belong-to by
A classroom belongs to a school, or we can say a school has a classroom. So, calling both of them is only a matter of point of view.
Composition is a strong type of "has-a" relationship because the containing object is its owner. So, objects are tightly coupled, which means if we delete the parent object, the child object will also get deleted with it.


Aggregation
Aggregation relationship is also a "has-a" relationship. The only difference between Aggregation and Composition is that in Aggregation, objects are not tightly coupled or don't involve owning. All the objects are independent of each other and can exist even if the parent object gets deleted. Let's understand this by using the following example:
A car comes with a wheel, and if we take off its wheels, the wheels will still exist. But a car without wheels won't be as useful as a car with its wheels, and that's how this relationship existed in the first place for assembling the parts to a bigger construct, which is capable of more things than its parts.


Association
Association is not a has-a relationship and the weakest relationship among all. In an Association relationship, none of the objects are parts or members of another. A simple example of Association is a mother and her child.
It indicate the relationship between two independent classes; the relationship may be one-to-one, one-to-many, or many-to-many, but it need not indicate ownership.
Association is the weakest relationship between the three. It isn’t a “has-a” relationship, none of the objects are parts or members of another.

Association only means that the objects “know” each other. 


Comparing enum members in Java

In Java, enum is a special Java type used to define collections of constants. More precisely, a Java enum type is a special kind of Java class. An enum can contain constants, methods etc. enum can be defined as a group of named constant.
There are two ways for making comparison of enum members :

By using == operator
By using equals() method

equals method uses == operator internally to check if two enum are equal. This means, You can compare Enum using both == and equals method. But the question is if we have two ways for comparing two members of enum, then which one is better?

Both == operator and .equals() method are meant for comparison only. But there are few differences :

== operator never throws NullPointerException whereas .equals() method can throw NullPointerException.
== is responsible for type compatibility check at compile time whereas .equals() method will never worry about the types of both the arguments.
// Java program to illustrate enum members comparison 
class EnumDemo { 
	public enum Day { MON, 
					TUE, 
					WED, 
					THU, 
					FRI, 
					SAT, 
					SUN } 
	public static void main(String[] args) 
	{ 
		Day d = null; 

		// Comparing an enum member with null 
		// using == operator 
		System.out.println(d == Day.MON); 

		// Comparing an enum member with null 
		// using .equals() method 
		System.out.println(d.equals(Day.MON)); 
	} 
} 


false
Exception in thread "main" java.lang.NullPointerException

Explanation: In the above program, we are comparing an enum member with a null. When we use == operator for comparison, then we are not getting any Exception whereas when we use .equals() method then we are getting NullPointerException.
Therefore we can conclude that when we use == operator for enum member comparison, then it does not throw any Exception but .equals() method throw an Exception.



// Java program to illustrate enum members comparison 
class EnumDemo { 
	public enum Day { MON, 
					TUE, 
					WED, 
					THU, 
					FRI, 
					SAT, 
					SUN } 
	public enum Month { JAN, 
						FEB, 
						MAR, 
						APR, 
						MAY, 
						JUN, 
						JULY } 
	public static void main(String[] args) 
	{ 
		// Comparing two enum members which are from different enum type 
		// using == operator 
		System.out.println(Month.JAN == Day.MON); 

		// Comparing two enum members which are from different enum type 
		// using .equals() method 
		System.out.println(Month.JAN.equals(Day.MON)); 
	} 
} 

error: incomparable types: Month and Day

Explanation:In the above program, we are comparing an enum member with an another enum member. When we use .equals() method for comparison then we are not getting any Compilation Failure(CF) whereas when we use == operator then we are getting Compilation Failure(CF) saying “incomparable types” . Therefore we can conclude that when we use == operator for enum member comparison then it performs type compatibility check at compile time whereas .equals() method will never worry about the types of both the arguments(it will just give “false” for incomparable types).



Angular - HTTP POST Request Examples
 POST request with a JSON body
 ngOnInit() {
    this.http.post<any>('https://reqres.in/api/posts', { title: 'Angular POST Request Example' }).subscribe(data => {
        this.postId = data.id;
    })
}
POST request with strongly typed response
ngOnInit() {          
    this.http.post<Article>('https://reqres.in/api/posts', { title: 'Angular POST Request Example' }).subscribe(data => {
        this.postId = data.id;
    })
}

...

interface Article {
    id: number;
    title: string;
}

POST request with headers set
ngOnInit() {
    const headers = { 'Authorization': 'Bearer my-token', 'My-Custom-Header': 'foobar' };
    const body = { title: 'Angular POST Request Example' };
    this.http.post<any>('https://reqres.in/api/posts', body, { headers }).subscribe(data => {
        this.postId = data.id;
    });
}

POST request with error handling

ngOnInit() {
    this.http.post<any>('https://reqres.in/invalid-url', { title: 'Angular POST Request Example' }).subscribe({
        next: data => {
            this.postId = data.id;
        },
        error: error => {
            this.errorMessage = error.message;
            console.error('There was an error!', error);
        }
    })
}

Prerequisites for making HTTP requests from Angular

1. Add the HttpClientModule to the imports array of your AppModule
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { HttpClientModule } from '@angular/common/http';

import { AppComponent } from './app.component';

@NgModule({
    imports: [
        BrowserModule,
        HttpClientModule
    ],
    declarations: [
        AppComponent
    ],
    bootstrap: [AppComponent]
})
export class AppModule { }

Import the HttpClient into your component and add it to the constructor() 

import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Component({ selector: 'app', templateUrl: 'app.component.html' })
export class AppComponent implements OnInit {
    postId;

    constructor(private http: HttpClient) { }

    ngOnInit() {      
        // Simple POST request with a JSON body and response type <any>
        this.http.post<any>('https://reqres.in/api/posts', { title: 'Angular POST Request Example' }).subscribe(data => {
            this.postId = data.id;
        })
    }
}

Kafka what is Retry Mechanism

https://medium.com/@cobch7/kafka-exception-handling-and-retry-mechanism-a911541321fe


handling high traffic in spring boot..?

Horizontal and Vertical Scaling | System Desig?

stored procedures and triggers in mysql..?

features of AWS

Write a program to find 3rd largest number 

JavaScript var keyword
The var is the oldest keyword to declare a variable in JavaScript. It has the Global scoped or function scoped. This means:
If you create a variable outside of a function, you can use it anywhere in your code.
If you create a variable inside a function, you can only use it within that function.

JavaScript let keyword
The let keyword is an improved version of the var keyword. It is introduced in the ES6 or EcmaScript 2015. These variables has the block scope. It can’t be accessible outside the particular code block ({block}).
The variable is only available inside the block {} where you define it.

JavaScript const
The const keyword has all the properties that are the same as the let keyword, except the user cannot update it and have to assign it with a value at the time of declaration. These variables also have the block scope. It is mainly used to create constant variables whose values can not be changed once they are initialized with a value.

const is similar to let, but with one big difference: once you assign a value to a const variable, you can’t change it later. Like let, const is block-scoped.

When to Use let and const
var can be tricky because its scope is either global or within a function, which can lead to bugs. To avoid these issues:

Use let when you know a variable’s value might change later in your code.
Use const for variables that should never change once you set them.
